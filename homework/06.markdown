---
layout: homework
title: CSCI-UA.0480 - Homework #6
---
<style>
.warning {
    background-color: #eecccc;
}
</style>

<h1 style="background-color: #ff99aa">DRAFT, do not start until repositories are distributed</h1>
<div class="panel panel-default">
	<div class="panel-heading">Homework #6</div>
	<div class="panel-body" markdown="block">

# Authentication and Mongoose Models - __Due Tuesday, April 3rd, by 11PM__

## Overview

### Description

#### Login, Registration, and Multiple Models

Create a link aggregator site (_like_ reddit, hacker news, etc.) that supports user registration and login... along with the ability to post articles (links).

Registering or logging in will create an authenticated session that contains all of the logged in user's information. Some elements on pages will only appear when a user is logged in. Some pages will redirect to login if a user arrives unauthenticated.

### Goals

* use `bcrypt.js` to salt and hash a password and to compare a hash to a plain text password
* use [the slides on authentication](../slides/16/auth.html) to implement login and registration
* use express-session to store user data  / an authenticated session
* use embedded or related documents to model users and posted articles
* extract path components to determine what data to use to render a page

### ⚠️⚠️⚠️ WARNING ⚠️⚠️⚠️

<span class="warning">This homework is for learning purposes only; __do not use it__ for authentication on a deployed site</span>

* our application will only be served locally, and consequently, it will not be served over an encrypted connection ... and - related - cookies aren't set to secure
* it will allow case sensitive usernames
* it encourages the use of multiple nested callbacks instead of promises and / or async await
* not all errors accounted for or handled gracefully
* user interaction and error messaging will be minimal (for example, successful login should redirect to page that required login) 
* some error messages reveal will info about the existence of a user
* our session secret will be in version control

### Features

1. register a new account
2. login using an existing account
3. add a new article
4. view all posted articles
5. show a single article's details
6. prevent / allow access to certain ui elements or pages based on authenticated status


#### You'll have 5 pages and 3 forms:

* __/__ - lists all articles
* __/register__ - register form
* __/login__  - login form
* __/articles/add__ - add new article form
* __/article/:slug__ - detail page for a specific article


#### Example Interaction

Here's what it looks like to login, add a new article, and view the link and details page:.

<img src="../resources/img/hw06-aintreddit-00-all.gif">

### Submission Process

You will be given access to a private repository on GitHub. The repository will have a partially built Express application. The final version of your assignment should be in GitHub:

* __Push__ your changes to the homework repository on GitHub.
* Add the URL of the repository to your assignment submission in NYU Classes.

### Make at Least 4 Commits

* Commit multiple times throughout your development process.
* Make at least 4 separate commits - (for example, one option may be to make one commit per part in the homework).


## Part 1 - Setup and Authentication Functions

### Starting Project

Your repository should have the following files and directories.

<pre><code data-trim contenteditable>
├── package.json
├── src
│   ├── app.js
│   ├── auth.js
│   ├── db.js
│   ├── public
│   │   └── css
│   └── views
│       ├── article-add.hbs
│       ├── login.hbs
│       ├── register.hbs
└── test
    ├── mock-user.js
    └── test-auth.js
</code></pre>

{% comment %}
    ├── cli-tests.js
│       ├── article-detail.hbs
│       └── restricted.hbs
│       ├── error.hbs
│       ├── index.hbs
│       ├── layout.hbs
│   │       └── site.css
{% endcomment %}

Add the following:

* `.gitignore` - ignore `node_modules` and any other files that you would like to keep out of your repository (varies depending on your OS and editor... for example, if you're on vim on MacOS, you may want to ignore `.swp` files and `.DS_Store` etc.)
* `.eslintrc.js`/`.eslintrc.json` - you can use a previous configuration for this

### Dependencies

The following modules are already listed in `package.json` and configured in `app.js` ... so simply run `npm install` in the project root

* `express`
* `hbs` 
* `express-session` - for session management
* `mongoose` - for database access
* `bcryptjs` - module for salting, hashing and comparing passwords
* `mongoose-url-slugs` - plugin for autogenerating slugs

Your app is configured to listen on port 3000. <span class="warning">Do not change this.</span>


### About bcrypt.js

bcrypt.js is a JavaScript implementation of password hashing function called (you guessed it!) bcrypt. We'll use it for login and registration. The result of using bcrypt contains both the hash and the salt! Check out the details in the first section of the [wikipedia article](https://en.wikipedia.org/wiki/Bcrypt) and the diagram below illustrating the output of bcrypt: 

```
$2a$10$N9qo8uLOickgx2ZMRZoMyeIjZAgcfl7p92ldGxad68LJZdL17lhWy
|_____||____________________||_____________________________|
   |             |                          |
   |             |                          +-- hash
   |             |
   |             +-- salt
   |
   +-- algorithm and cost factor

```

Check out [how to use bcrypt.js](https://www.npmjs.com/package/bcryptjs).


### Database Setup

* in `src/db.js`....
* using mongoose, __create two schemas__:
	* `UserSchema`
		* it should have the following fields (all `String`, and all required):
			* `username` - user name used for login and public display
			* `email` - user's email
			* `password` - the combined salt and hash
    	* username should be a unique field, so set as `{type: String, unique: true, required: true}`
    	* typically hash and salt should be stored in separate fields, but because we're using `bcrypt` a single field is adequate for both
	* `ArticleSchema`
		* it should have the following fields (all `String`, validation is your discretion)
			* `title`
			* `url`
			* `description`
	* finally, __you must associate users and articles__ by using embedded or related documents:
		* if relating documents, add a `User`'s id to `ArticleSchema`
		* if embedding, perhaps adding an `Array` of `Article` objects to `UserSchema` woudl work
		* which one would be easier to use to list all of the articles posted by everyone on the home page, without user info?
* don't forget to register your models:
    * `mongoose.model('User', UserSchema);`
    * `mongoose.model('Article', ArticleSchema);`
* your db.js is configured to connect to `hw06`:
    * `mongoose.connect('mongodb://localhost/hw06');`

### Create Helper Functions

Create the following functions in `src/auth.js`:

1. `register` 
2. `login`
3. `startAuthenticatedSession`

You'll use these functions in your express application to implement a login and registration page.

### `register`

`register(username, email, password, errorCallback, successCallback)` 

parameters:

* `username`: username
* `email`: email
* `password`: plain text password
* `errorCallback`: function to call if an error occurs
	* `errorCallback(errObj)`
	* `errObj` will have a key called message that contains an error message
* `successCallback`: function to call if registration works
	* `successCallback(userObject)`
	* `userObject` is the object that represents the newly saved user

return:

* no return value (instead, calls callback functions)

description:

1. when you encounter any errors as you run through the registration process:
	* log the error to the console (server)
	* call the `errorCallback` passing in an error object containing a key called `message` and a value of a string describing the error that occurred (this gives the caller the ability to pass in a function that handles the error - for example, rendering a template with an error message)
	* some errors will require specific strings to be in the `message` property of the error object, while others are your discretion (read the instructions and run the tests for details)
2. check the length of the username and password passed in; they should both be greater than or equal to 8
3. if either the username or password does not meet this requirement, call the `errorCallback` function with an object containing a key called `message` and value of `USERNAME PASSWORD TOO SHORT`
4. check if the user already exists (case sensitive check is ok)
	* remember to pull out your `User` model by using `const User = mongoose.model('User');`
    * use `User.findOne((err, result, count) => {   })` to check if the user already exists
        * you can check the object with `if(result)` to determine if a `User` object was returned
    * or use `User.find((err, result, count) => {   })`... the 
        * you can check if the length of the resulting `Array` is greater than 0
5. if the user already exists, call the `errorCallback` function with an object containing a key called `message` with the value, `USERNAME ALREADY EXISTS`
6. if the user doesn't exist yet, then it's ok to go ahead and create a new user...
7. salt and hash the password using the `bcryptjs` module
    * [check out the documentation on the bcrypt module](https://www.npmjs.com/package/bcryptjs#usage---async)
	* do not use the sync calls (use the async version of bcrypt)
    * auto generate a hash and a salt:
        <pre><code data-trim contenteditable>// you can use a default value of 10 for salt rounds 
bcrypt.hash(myPlaintextPassword, saltRounds, function(err, hash) {
          // do more stuff here!
});
</code></pre>
8. notice the `hash` parameter in the callback above; it _actually_ contains both the hash and the salt
9. now we have everything we need to create a new user
    * instantiate  a new `User` object
    * set the `username` and `email` to whatever was passed in as arguments, and the `password` should be set to the salt and hash generated
	* call `save`
	* if the `save` succeeds, call the `successCallback` function with the newly saved user
	* otherwise call the `errorCallback` with an object that contains the key, `message`, and a generic error message, `DOCUMENT SAVE ERROR`, as the value
10. check that your function works by:
	1. running the unit tests, `mocha test/test-auth.js` (comment out all tests except for registration related ones), to check for:
		* a user object being passed to the success callback
		* the user object having the same name and email as the original arguments passed in to the `register` function
		* the password hash in the user object being the same as the hashed version of the original password passed in to the `register` function
		* the error callback being called if a duplicate user is found (`USERNAME ALREADY EXISTS`)
		* the error callback being called if a save issue occurred (`DOCUMENT SAVE ERROR`)
	2. writing a small script to test if running the function actually creates a user in the database!
		<pre><code data-trim contenteditable>require('../src/db.js');
const auth = require('../src/auth.js');
auth.register('testtest', 'test@test.test', 'testtest',
  function(err) {console.log(err);},
  function(user) {console.log(user);}
);
</code></pre>

Example Usage:

<pre><code data-trim contenteditable>
function success(newUser) {
  // start an authenticated session and redirect to another page
}
function error(err) {
  // render a template containing an error message
}
auth.register(req.body.username, req.body.email, req.body.password, error, success);
</code></pre>

### `login`

`login(username, password, errorCallback, successCallback)` 

parameters:

* `username`: username
* `password`: plain text password
* `errorCallback`: function to call if an error occurs
	* `errorCallback(errObj)`
	* `errObj` will have a key called message that contains an error message
* `successCallback`: function to call if login is successful
	* `successCallback(userObject)`
	* `userObject` is the object that represents the newly saved user

return:

* no return value (instead, calls callback functions)

description:


1. when you encounter any errors as you run through the login process:
	* log the error to the console (server)
	* call the `errorCallback` passing in an error object containing a key called `message` and a value of a string describing the error that occurred (this gives the caller the ability to pass in a function that handles the error - for example, rendering a template with an error message)
	* some errors will require specific strings to be in the `message` property of the error object, while others are your discretion (read the instructions and run the tests for details)
* your route handler should find the user with username entered in the form using `findOne`
    <pre><code data-trim contenteditable>
User.findOne({username: req.body.username}, (err, user, count) => {
        if (!err && user) {
            // compare with form password!
    }
});
</code></pre>
* if the user doesn't exist, show a message on the login form or show a generic error page saying that the user doesn't exist (in terms of security, this reveals too much information, but for debugging and for ease of use, this is what we'll use)
* if the user exists... then check if the password entered matches the password in the database
    * the password in the database is salted and hashed... and contains the salt
    * so a simple compare with `===` is not adequate
    * we must salt and hash the password and compare with the hash stored in the database
    * we can use the function, `bcrypt.compare` to do this:
        <pre><code data-trim contenteditable>bcrypt.compare(req.body.password, user.password, (err, passwordMatch) => {
    // regenerate session if passwordMatch is true
});
</code></pre>
    * note that `passwordMatch` within the callback will be either true or false, signifying whether or not the salted and hashed version of the incoming password matches the one stored in the database
* once the match is verified, a new authenticated session can be started - you can use the same code that you used in registration
    <pre><code data-trim contenteditable> // assuming that user is the user retrieved from the database
req.session.regenerate((err) => {
    if (!err) {
        req.session.username = user.username; 
    } else {
        console.log('error'); 
        res.send('an error occurred, please see the server logs for more information');
    }
});
1. when you encounter any errors as you run through the registration process:
	* log the error to the console (server)
	* call the `errorCallback` passing in an error object containing a key called `message` and a value of a string describing the error that occurred (this gives the caller the ability to pass in a function that handles the error - for example, rendering a template with an error message)
	* some errors will require specific strings to be in the `message` property of the error object, while others are your discretion (read the instructions and run the tests for details)
* once the match is verified, a new authenticated session can be started - you can use the same code that you used in registration
    <pre><code data-trim contenteditable> // assuming that user is the user retrieved from the database
req.session.regenerate((err) => {
    if (!err) {
        req.session.username = user.username; 
    } else {
        console.log('error'); 
        res.send('an error occurred, please see the server logs for more information');
    }
});
</code></pre>
* finally, once the session has been started, you can redirect to the homepage, `/`


Example Usage:

<pre><code data-trim contenteditable>
function success(newUser) {
  // start an authenticated session and redirect to another page
}
function error(err) {
  // render a template containing an error message
}
auth.login(req.body.username, req.body.password, error, success);
</code></pre>

### `startAuthenticatedSession`

`startAuthenticatedSession(req, user, callback)` 

parameters:

* `req`: an express Request object that contains a session variable
* `user`: the user data to store in the session
* `callback`: the callback to call after a new session has been created
	* `callback(err)` - the callback only has a single parameter, `err`

* once you've successfully saved the user, start an authenticated session:
    * regenerate a session id
    * add the username to the session
    * this way, to check if someone is logged in, we simply check if username exists in session (`if(req.session.username)`)
        <pre><code data-trim contenteditable>
// assuming that user is the user object just saved to the database
req.session.regenerate((err) => {
    if (!err) {
        req.session.username = user.username; 
    } else {
        console.log('error'); 
        res.send('an error occurred, please see the server logs for more information');
    }
});

Once you've started an authenticated session, you can determine if a user is logged in by using:

`req.session.user`

So, a simple check in your express app and template may be:

<pre><code data-trim contenteditable>
// add req.session.user to every context object for templates
app.use((req, res, next) => {
  // now you can use {{user}} in your template!
  res.locals.user = req.session.user;
  next();
});
</code></pre>

<pre><code data-trim contenteditable>
{{#if user}} 
<h1>something that can only be seen if logged in</h1>
{{/if user}} 
</code></pre>


You can retrieve a user's username with:

`req.session.user.usernmae`

### POST /register Validation

To implement the POST logic for `/register`:

errors:

password or username too short
username already exists

no errors:

start authenticated session
redirec to home page


</code></pre>

### POST /register Redirect to Homepage

* finally, create a home page and redirect to that page once registration has succeeded (all validation passed, a new user is saved, and a new authenticated session is started)...
    * add `res.redirect('/');` to your successful registration (that is... within the callbacks to generating the hash, saving and starting a new session)
    * create a route handler for `/`
    * for the homepage, show a message that says whether or not a user is logged in
    * you can do this by passing `req.session.username` to the template when calling `render`
* checking your work
    * use the commandline client, `mongo`, to connect to your running mongo db instance
    * `use hw06`
    * `db.users.find()`
    * check that you have user documents with username and password filled in
* here's an example of how a successful registration should look:
    <br> ![register](../resources/img/hw06-auth-02-register.gif)

### Description

Registration should allow a user to create a new account and immediately start a new authenticated session. To do this, follow these steps:

1. show a registration form
2. after submitting the form, salt and hash the password using bcrypt
3. save the username and salt/hash combination 
4. regenerate the session (create a new session id)
5. add some information, such as the username, to the session
6. redirect to home, `/`, if registration is successful


Create two routes for registration

1. `GET /register` - to display the form
2. `POST /register`- to process the form input

### GET /register Overview and Implementation

* create the route for `GET /register` in `app.js`
* it should render a template, `register.hbs` that contains a form
* `register.hbs` should contain a form
    * the form will `POST` to `/register`
    * (that is, when you press the submit button, a POST request will be made to `/register`)

### POST /register Overview

<span class="warning">Warning: the following code you'll write will have several nested callbacks!</span>

* we haven't covered promises yet, but if you want to remove nesting, using promises is one solution (though you'll have to research this on your own): both `mongoose` and `bcrypt` provide promises (instead of callbacks) as part of their api
* another way of dealing with this is wrapping some functionality in a function, but if you do this, you'll need to write a function that takes a callback!

For registration, we'll handle a couple of error states:

1. password length too short 
2. user already exists


## Part 3 - Login

### Description

Login should allow a user to authenticate using a username and password. To do this, follow these steps:

1. show a login form
2. search the database for the username specified in the login form
3. after finding the user, salt and hash the incoming password and compare with the password in the database by using `bcrypt.compare`
4. if the passwords match then start a new authenticated session
5. redirect to the home page

Create two routes for login

1. `GET /login` - to display the form
2. `POST /login`- to process the form input

### GET /login Implementation

* create the route for `GET /login` in `app.js`
* it should render a template, `login.hbs` that contains a form
* `login.hbs` should contain a form with the following specifications
    * the form will `POST` to `/login`
    * (that is, when you press the submit button, a POST request will be made to `/login`)

### POST /login Implementation

Now it's time to handle the data POSTed by the form above...

* create the route for `POST /login` in `app.js`
* here's an example of how a successful login should look:
    <br> ![login](../resources/img/hw06-auth-03-login.gif)


## Part 4 - Restricted Page

Finally, create a page at the path, `/restricted`. This path should:

* redirect to `login` if the user is not logged in
* display the message: `your are logged in so you can see secret stuff`

Here's what the restricted page interaction should look like:

<br> ![viewing a restricted page](../resources/img/hw06-auth-04-restricted.gif)

## Extra Credit (15 points)

### Logout

1. create a route for logging out
2. it should respond to `GET /logout`
3. invalidate the authenticated session by calling [destroy](https://github.com/expressjs/session#sessiondestroycallback)
4. if `destroy` is successful, redirect to home (`/`)


</div>

</div>

<img src="../resources/img/hw06-aintreddit-01-register.gif">
<img src="../resources/img/hw06-aintreddit-02-register-same.gif">
<img src="../resources/img/hw06-aintreddit-03-register-short.gif">
<img src="../resources/img/hw06-aintreddit-04-login.gif">
<img src="../resources/img/hw06-aintreddit-05-no-username.gif">
<img src="../resources/img/hw06-aintreddit-06-login-password.gif">
<img src="../resources/img/hw06-aintreddit-07-add.gif">
<img src="../resources/img/hw06-aintreddit-08-details.gif">
